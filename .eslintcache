[{"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/index.js":"1","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/App.js":"2","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Controller.js":"3","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Model.js":"4","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/View.js":"5","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/ReferenceTools.js":"6","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Set.js":"7","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Light.js":"8","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Shapes.js":"9","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Parameters.js":"10","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/VisualisationMenu.js":"11","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/GeneralMenu.js":"12","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/Tools.js":"13","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/SubMenus.js":"14"},{"size":198,"mtime":1676296895669,"results":"15","hashOfConfig":"16"},{"size":928,"mtime":1676296895626,"results":"17","hashOfConfig":"16"},{"size":13016,"mtime":1678128132448,"results":"18","hashOfConfig":"16"},{"size":19639,"mtime":1678211441041,"results":"19","hashOfConfig":"16"},{"size":7001,"mtime":1678134579062,"results":"20","hashOfConfig":"16"},{"size":4053,"mtime":1677543033679,"results":"21","hashOfConfig":"16"},{"size":14857,"mtime":1678211315991,"results":"22","hashOfConfig":"16"},{"size":1375,"mtime":1676296895628,"results":"23","hashOfConfig":"16"},{"size":24017,"mtime":1676296895633,"results":"24","hashOfConfig":"16"},{"size":654,"mtime":1676296895630,"results":"25","hashOfConfig":"16"},{"size":7090,"mtime":1678131913788,"results":"26","hashOfConfig":"16"},{"size":14976,"mtime":1678202422622,"results":"27","hashOfConfig":"16"},{"size":6305,"mtime":1677543033706,"results":"28","hashOfConfig":"16"},{"size":36789,"mtime":1678135027338,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"trfy6y",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/index.js",[],["63","64"],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/App.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Controller.js",["65","66","67"],"import Model from \"./Model/Model\";\nimport View from \"./View/View\"\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport { std, mean } from 'mathjs';\nimport video_sample from'./Video_sample/cnf.00000000.json';\nimport video_sample2 from'./Video_sample/cnf.00000001.json';\nimport unfolded_sample1 from'./Samples/UnfoldedSC4.json';\nimport unforded_sample2 from'./Samples/UnfoldedE3.json';\nimport sample1 from './Samples/dummy-vector.json';\nimport sample2 from './Samples/dummy-quaternion.json';\nimport sample3 from './Samples/sc4-isotropic.json';\nimport sample4 from './Samples/sc4-nematic.json';\nimport sample5 from './Samples/sc4-smectic.json';\nimport sample6 from './Samples/e5-isotropic.json';\nimport sample7 from './Samples/e5-nematic.json';\nimport sample8 from './Samples/o5-isotropic.json';\nimport sample9 from './Samples/o5-nematic.json';\nimport sample10 from './Samples/bx-crystal.json';\nimport sample11 from './Samples/bx-crystal-2.json';\nimport sample12 from './Samples/fig1.json';\nimport sample13 from './Samples/hbc.json';\nimport sample14 from './Samples/single.json'\nimport sample15 from './Samples/qmga-shapes.json'\nimport sample16 from './Samples/threejs-shapes.json'\n\nimport { Alert, Notification } from 'rsuite'\n\nclass Controller {\n    model;\n    view;\n    io;\n\n    constructor() {\n        \n        this.io = [this.save, this.load, this.export, this.loadSample, this.toggleAutorotate];\n        this.externalToggle = new this.ExternalToggle();\n        this.chronometer = new this.Chronometer(this.notify, this.externalToggle);\n\n        this.model = new Model(this.chronometer, this.notify);\n        this.view = new View(this.model, this.io, this.chronometer, this.externalToggle);\n\n        Alert.config(\n            ({\n                top: 70,\n                duration: 8000\n            })\n        );\n\n    }\n\n    ExternalToggle = class ExternalToggle {\n        // these functions are defined within their respective React components\n        closeSidemenu = () => { }\n        autorotate = () => { }\n        updateCamera = () => { }\n\n    }\n\n    Chronometer = class Chronometer {\n\n        constructor(notify, externalToggle) {\n            this.fps = 0;\n            this.frames = 0;\n            this.prevTime = null;\n            this.model = null;\n\n            this.notify = notify;\n            this.externalToggle = externalToggle;\n\n            this.step = 200;\n            this.tick = 12;\n            this.testing = false;\n            this.counter = 0;\n            this.rawPerformanceData = [];\n            this.avgPerformanceData = [];\n            this.stdPerformanceData = [];\n        }\n\n        f = (n) => {\n            //is initialised in Header React Component\n        }\n\n        fps = () => {\n            return this.fps;\n        }\n\n        logPerformance = () => {\n            this.rawPerformanceData.push(this.fps);\n            if (this.counter == this.tick) {\n\n                this.avgPerformanceData.push(mean(this.rawPerformanceData));\n                this.stdPerformanceData.push(std(this.rawPerformanceData));\n                this.rawPerformanceData = [];\n                this.counter = 0;\n\n                this.notify('info', ' Test Update (' + this.model.testTotal.toString() + ' Molecules)',\n                    (<p style={{ width: 320 }} >\n                        <b>FPS</b> <br />\n                        Average: {this.avgPerformanceData[this.avgPerformanceData.length - 1].toString()} <br />\n                        Standard Deviation: {this.stdPerformanceData[this.stdPerformanceData.length - 1].toString()} <br />\n                    </p>));\n\n                console.log('# of Molecules: ' + this.model.testTotal.toString() + ' FPS - Avg:  ' + this.avgPerformanceData[this.avgPerformanceData.length - 1].toString()\n                    + 'Std: ' + this.stdPerformanceData[this.stdPerformanceData.length - 1].toString())\n\n                if (this.model.addRandomParticles(this.step)) {\n                    this.testing = false;\n                    this.model.deleteAllMeshes();\n\n                    console.log('Average FPS');\n                    console.log(this.avgPerformanceData);\n                    console.log('Std FPS');\n                    console.log(this.stdPerformanceData);\n\n                    this.externalToggle.autorotate();\n\n                    this.notify('success', 'Test Completed Succesfully',\n                        (<p style={{ width: 320 }} >\n                            All molecules deleted. Please see console output for a list of average FPS and standard deviations.\n                        </p>));\n\n                }\n            }\n            this.counter++;\n        }\n\n\n        click = () => {\n            this.frames++;\n\n            if (this.prevTime == null) {\n                this.prevTime = Date.now();\n            }\n\n            var time = Date.now();\n\n\n            if (time > this.prevTime + 1000) {\n                this.fps = (this.frames * 1000) / (time - this.prevTime);\n\n                if (this.testing) {\n                    this.logPerformance();\n                }\n\n                this.prevTime = time;\n                this.frames = 0;\n                this.f(this.fps);\n\n\n            }\n        }\n    };\n\n\n    start = () => {\n        this.chronometer.model = this.model;\n\n        this.generate(sample2, true);\n        this.addListeners();\n        this.render();\n        this.notify('info', 'Welcome to WebMGA',\n            (<div>\n            <p style={{ width: 320 }} >\n                Check out the liquid crystal configurations in the Library, and head to the About section to learn more!\n                \n            </p>\n            <p style={{ width: 320 }} >\n                This application works best on the Chrome browser.\n             </p></div>\n            )\n\n\n\n        );\n    }\n\n    notify(type, title, description) {\n        Notification[type]({\n            title: title,\n            placement: 'bottomEnd',\n            duration: 15000,\n            description: description\n        });\n    }\n\n    //from stackoverflow\n    download = (data, filename, type) => {\n        var file = new Blob([data], { type: type });\n        if (window.navigator.msSaveOrOpenBlob) // IE10+\n            window.navigator.msSaveOrOpenBlob(file, filename);\n        else { // Others\n            var a = document.createElement(\"a\"),\n                url = URL.createObjectURL(file);\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            setTimeout(function () {\n                document.body.removeChild(a);\n                window.URL.revokeObjectURL(url);\n            }, 0);\n        }\n    }\n\n    save = () => {\n        let data = {};\n        data.model = this.model.getData();\n        data.state = this.view.getData();\n        this.download(JSON.stringify(data), 'visualisation.webmga', 'application/json');\n    }\n\n    generate = (data, starting) => {\n        this.model.genSets(data.model.sets);\n        if (data.state == null) {\n            Alert.info(\"Setting default viewing state.\");\n            this.view.setDefaultState(starting);\n        } else {\n            this.view.setState(data.state);\n        }\n        this.model.updateLOD(this.model.lod);\n        this.model.update();\n        this.externalToggle.closeSidemenu();\n\n    }\n\n    load = (file) => {\n        let fileReader = new FileReader();\n        const read = () => {\n            var data = JSON.parse(fileReader.result);\n            try {\n                this.generate(data, false);\n                Alert.success('File loaded successfully.');\n            } catch {\n                Alert.error('Error: Please review uploaded file. See manual for help.');\n                return;\n            }\n        }\n        fileReader.onloadend = read;\n        fileReader.readAsText(file);\n    }\n\n    loadSample = (id) => {\n        let sample;\n\n        switch (id) {\n            case 1:\n                sample = sample1;\n                break;\n            case 2:\n                sample = sample2;\n                break;\n            case 3:\n                sample = sample3;\n                break;\n            case 4:\n                sample = sample4;\n                break;\n            case 5:\n                sample = sample5;\n                break;\n            case 6:\n                sample = sample6;\n                break;\n            case 7:\n                sample = sample7;\n                break;\n            case 8:\n                sample = sample8;\n                break;\n            case 9:\n                sample = sample9;\n                break;\n            case 10:\n                sample = sample10;\n                break;\n            case 11:\n                sample = sample11;\n                break;\n            case 12:\n                sample = sample12;\n                break;\n            case 13:\n                sample = sample13;\n                break;\n            case 14:\n                sample = sample14;\n                break;\n            case 15:\n                sample = sample15;\n                break;\n            case 16:\n                sample = sample16;\n                break;\n            case 17:\n                sample =unfolded_sample1;\n                break;\n            case 18:\n                sample =unforded_sample2 ;\n                break;\n            case 19:\n                sample = video_sample;\n                break;\n            case 20:\n                sample =video_sample2;\n                break\n            default:\n                Alert.error('Error: File does not exist');\n                return;\n        }\n\n        this.generate(sample, false);\n        Alert.success('File loaded successfully.');\n    }\n\n    convertQMGA = () => {\n        // fetch(sample2)\n        //     .then(res => res.text())\n        //     .then(configData => {\n        //         this.model.load(configData);\n        //         this.view.setDefaultStates();\n        //         console.log(this.model.sets);\n        //     });\n    }\n\n    export = (height, width,resolution) => {\n        // fix orthographic projection\n\n        this.model.height = height;\n        this.model.width = width;\n        this.model.updateCamera();\n\n        this.model.renderer.setSize(width, height);\n        this.model.renderer.render(this.model.scene, this.model.camera);\n        const dataURL = this.model.renderer.domElement.toDataURL(\"image/jpeg\", resolution).replace(\"image/jpeg\", \"image/octet-stream\");\n\n        this.model.updateDimensions();\n        this.model.updateCamera();\n\n\n        var link = document.createElement('a');\n        link.download = \"WebMGA Visualisation.jpeg\";\n        link.href = dataURL;\n        link.click();\n\n        this.model.updateDimensions();\n        this.model.updateCamera();\n\n\n        this.notify('success', 'Thank you!', (\n            <div>\n                Image exported successfully.\n            </div>\n        ));\n    }\n\n    getHeader = () => {\n        return this.view.header;\n    }\n\n    getSidebar = () => {\n        return this.view.sidebar;\n    }\n\n    getDomElement = () => {\n        return this.model.renderer.domElement;\n    }\n\n    updateCamera = () => {\n        View.state.camera.position.x = Math.round(this.model.camera.position.x * 100) / 100;\n        View.state.camera.position.y = Math.round(this.model.camera.position.y * 100) / 100;\n        View.state.camera.position.z = Math.round(this.model.camera.position.z * 100) / 100;\n\n        View.state.camera.lookAt.x = Math.round(this.model.controls.target.x * 100) / 100;\n        View.state.camera.lookAt.y = Math.round(this.model.controls.target.y * 100) / 100;\n        View.state.camera.lookAt.z = Math.round(this.model.controls.target.z * 100) / 100;\n\n        View.state.camera.zoom = this.model.camera.zoom;\n\n\n        this.externalToggle.updateCamera();\n    }\n\n    render = () => {\n        this.model.update();\n        this.updateCamera();\n    }\n\n    addListeners = () => {\n\n\n        this.model.controls.addEventListener('change', this.render);\n\n        document.body.style.overflow = \"hidden\";\n\n        window.addEventListener('resize', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n        document.addEventListener('fullscreenchange', () => {\n            this.model.updateDimensions();\n            this.model.updateCamera();\n        });\n\n\n        document.body.onkeydown = (e) => {\n            var key = e.keyCode;\n            //TODO\n            //spacebar\n            if (key == 32) {\n                this.externalToggle.autorotate();\n\n                if (this.chronometer.testing) {\n                    this.chronometer.testing = false;\n                }\n            }\n            // //a\n            if (key == 65) {\n                console.log(this.model.camera.position);\n            }\n            // //g\n            // if (key == 71) {\n            //     this.model.toggleGrid();\n            // }\n            // if (key == 69) {\n            //     this.view.toggleSidebar();\n            // }\n        }\n    }\n\n\n}\n\n\n\nexport default Controller;\n\n","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Model.js",["68","69","70","71","72","73","74","75","76","77"],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/View.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/ReferenceTools.js",["78","79","80","81"],"import {\n    GridHelper,\n    LineBasicMaterial,\n    Vector3,\n    Color,\n    BufferGeometry,\n    Line,\n    Box3Helper,\n    Box3,\n    SphereBufferGeometry,\n    MeshBasicMaterial,\n    Mesh\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport {Alert} from 'rsuite';\n\nexport class ReferenceTools {\n    subGrid;\n    axes = [];\n    // boundingShape;\n    // boundingShapeType;\n    setsGeometry;\n    size;\n    colour;\n    material;\n    R;G;B;\n\n    constructor(s, c) {\n        this.size = s;\n        this.colour = c;\n\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n\n        this.multicolour = true;\n        this.genMulticolourAxes();\n        this.genSubgrid();\n\n        this.R = new Color(\"rgb(255, 0, 0)\");\n        this.G = new Color(\"rgb(0, 255, 0)\");\n        this.B = new Color(\"rgb(0, 0, 255)\");\n\n        this.boundingShapeType = 'box';\n        this.setsGeometry = null;\n        \n    }\n\n    genBoundingShape(type, sets) {\n        this.boundingShapeType = type;\n        let b;\n        this.boundingShape = null;\n        \n        for (let set of sets) {\n            if (b != null){\n                break\n            }\n            b =set.genUnitBox()\n            \n        }\n    \n        switch (type) {\n            case 'box':\n                    let box = new Box3();\n                    box.setFromCenterAndSize(new Vector3(0,0,0),new Vector3(b[0]*2,b[1]*2,b[2]*2));\n                    this.boundingShape = new Box3Helper(box, this.colour);\n                    \n                break;\n            default:\n            Alert.error('Error: Unknown bounding shape identifier');\n            \n\n        }\n        \n\n        return this.boundingShape;\n\n    }\n\n   \n    updateColour(colour) {\n        this.colour = colour;\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 5\n        });\n        if(!this.multicolour){\n            this.genAxes();\n        }\n        this.genSubgrid();\n    }\n\n    updateSize(size) {\n        this.size = size;\n        if(this.multicolour){\n            this.genMulticolourAxes();\n        }else{\n            this.genAxes();\n        }\n        this.genSubgrid();\n    }\n\n    genSubgrid() {\n        this.subGrid = new GridHelper(this.size, this.size, this.colour, this.colour);\n    }\n\n    genAxes() {\n        this.axes = [];\n        let axesSize = this.size / 2;\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), this.material));\n    }\n\n    genMulticolourAxes(){\n        this.axes = [];\n        let axesSize = this.size / 2;\n        let mat1, mat2, mat3;\n        mat1 = new LineBasicMaterial({\n            color: this.R,\n            linewidth: 5\n        });\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), mat1));\n        mat2 = this.material = new LineBasicMaterial({\n            color: this.G,\n            linewidth: 5\n        });\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), mat2));\n        mat3 = this.material = new LineBasicMaterial({\n            color: this.B,\n            linewidth: 5\n        });\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), mat3));\n    }\n\n    toggleMulticolour(){\n        this.multicolour = !this.multicolour;\n        if(this.multicolour){\n            this.genMulticolourAxes();\n        }else{\n            this.updateColour(this.colour);\n            this.genAxes();\n        }\n    }\n   \n\n}\n\nexport default ReferenceTools;","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Set.js",["82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97"],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Light.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Shapes.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Parameters.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/VisualisationMenu.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/GeneralMenu.js",["98","99"],"\nimport { Header, Dropdown, FormGroup, Drawer, Nav, Navbar, Icon, Button, ButtonToolbar, Slider, Form, ControlLabel, Whisper, Tooltip, Divider, Alert } from 'rsuite';\nimport { ParameterSet } from './Tools';\nimport React from \"react\";\n\nclass ExportDropdown extends React.Component {\n\n    constructor(props) {\n        super();\n        this.dimensions = [1000,1000];\n        this.resolution =[1.0];\n        this.f = props.f;\n        this.setResolution = this.setResolution.bind(this);\n        this.setDimensions = this.setDimensions.bind(this);\n        this.export = this.export.bind(this);\n    }\n\n    setDimensions(val, index) {\n        this.dimensions[index] = parseInt(val);\n    }\n    setResolution(val,index){\n        this.resolution[index] = parseInt(val);\n    }\n    export() {\n        this.f(...this.dimensions.concat(this.resolution));\n    }\n\n    render() {\n        return (\n            <Dropdown title=\"Export\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"export\" />} >\n\n                <ParameterSet f={this.setDimensions} titles={['Height', 'Width']} values={this.dimensions} step={5} positive\n                    styling={[\n                        { marginRight: 25 },\n                        { marginTop: 18, marginLeft: 35 }\n                    ]} />\n                 <ParameterSet f={this.setResolution} titles={['Resolution']} values={this.resolution} step={0.1} positive\n                    styling={[\n                        { marginRight: 25 },\n                        { marginTop: 18, marginLeft: 35 }\n                    ]} />\n\n                <Button style={{ width: 180, marginLeft: 25, marginRight: 25, marginTop: 15, marginBottom: 15 }} appearance='primary' onClick={this.export}> Export </Button>\n            </Dropdown>);\n    }\n\n};\n\nclass LibraryDropdown extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.model = props.model;\n        this.state = { active: 2 };\n        this.f = props.f;\n\n        this.updateKey = this.updateKey.bind(this);\n    }\n\n    updateKey(key) {\n        this.setState({\n            active: key\n        });\n    }\n\n    render() {\n        const state = this.state;\n        return (\n            <Dropdown\n                title=\"Library\"\n                trigger='click'\n                placement=\"bottomEnd\"\n                icon={<Icon icon=\"database\" />}\n                appearance='subtle'\n                onSelect={(eventKey) => {\n                    this.f(eventKey);\n\n                }}>\n\n                <Dropdown.Menu title=\"Samples\">\n                    <Dropdown.Item eventKey={14}>Single Molecule</Dropdown.Item>\n                    <Dropdown.Item eventKey={15}>QMGA Geometries</Dropdown.Item>\n                    <Dropdown.Item eventKey={16}>Threejs Geometries</Dropdown.Item>\n                    <Dropdown.Item eventKey={1}>Unit Vector Orientations</Dropdown.Item>\n                    <Dropdown.Item eventKey={2}>Quaternion Orientations</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Unfolded Samples\">\n                <Dropdown.Item eventKey={17}>Unfolded SC4 Nematic</Dropdown.Item>\n                <Dropdown.Item eventKey={18}>Unfolded E3 Chiral Nematic</Dropdown.Item>\n                <Dropdown.Item eventKey={19}>Video 0</Dropdown.Item>\n                <Dropdown.Item eventKey={20}>Video 2</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Spherocylinders\">\n                    <Dropdown.Item eventKey={3}>SC4 Isotropic</Dropdown.Item>\n                    <Dropdown.Item eventKey={4}>SC4 Nematic</Dropdown.Item>\n                    <Dropdown.Item eventKey={5}>SC4 Smectic</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Prolate and Oblate Ellipsoids\">\n                    <Dropdown.Item eventKey={12}>E3 Chiral Nematic</Dropdown.Item>\n                    <Dropdown.Item eventKey={6}>E5 Isotropic</Dropdown.Item>\n                    <Dropdown.Item eventKey={7}>E5 Nematic</Dropdown.Item>\n                    <Dropdown.Item eventKey={8}>O5 Isotropic</Dropdown.Item>\n                    <Dropdown.Item eventKey={9}>O5 Nematic</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Menu title=\"Dense Packings\">\n                    <Dropdown.Item eventKey={10}>Biaxial Crystal (Small)</Dropdown.Item>\n                    <Dropdown.Item eventKey={11}>Biaxial Crystal (Large)</Dropdown.Item>\n                    <Dropdown.Item eventKey={13}>HBC (in Cylinder)</Dropdown.Item>\n                </Dropdown.Menu>\n                <Dropdown.Item panel style={{ width: 120 }}></Dropdown.Item>\n            </Dropdown>\n        );\n\n    }\n}\n\nclass PerformanceDropdown extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.model = props.model;\n        this.state = { val: props.model.lod + 1 };\n\n        this.updateVal = this.updateVal.bind(this);\n    }\n\n    updateVal(val) {\n        this.setState({\n            val: val\n        });\n    }\n\n    render() {\n        const lod = this.state.val;\n        return (\n            <Dropdown title=\"Level of Detail\" trigger='click' placement=\"bottomEnd\" icon={<Icon icon=\"sliders\" />}>\n                <Form style={{ marginLeft: 20, marginTop: 20 }} layout=\"inline\">\n                    <FormGroup>\n                        <ControlLabel>Adjust LOD</ControlLabel>\n                        <Whisper placement=\"bottom\" trigger=\"hover\" speaker={\n                            <Tooltip>\n                                Decreasing LOD will increase rendering speed.\n                            </Tooltip>\n                        }>\n                            <Icon icon=\"question-circle\" size=\"lg\" />\n                        </Whisper>\n                    </FormGroup>\n                </Form>\n\n                <Slider\n                    min={1}\n                    step={1}\n                    max={5}\n                    value={lod}\n                    graduated\n                    progress\n                    style={{ width: 200, marginLeft: 30, marginRight: 30, marginBottom: 20 }}\n                    onChange={(value) => {\n                        this.model.updateLOD(value - 1);\n                        this.updateVal(value);\n                        this.model.update();\n                    }}\n\n                />\n                <br />\n            </Dropdown>\n        );\n    }\n\n}\n\n\nclass GeneralMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.model = props.model;\n        this.functions = props.functions;\n        this.toggler = props.toggler;\n        this.state = { fps: 0, showDrawer: false, rotating: false ,numOfRender:0};\n\n        this.updateFPS = this.updateFPS.bind(this);\n        this.toggleDrawer = this.toggleDrawer.bind(this);\n        this.toggleAutorotate = this.toggleAutorotate.bind(this);\n        this.runPerformanceTest = this.runPerformanceTest.bind(this);\n     \n\n        this.chronometer = props.chronometer;\n        this.chronometer.f = this.updateFPS;\n     \n\n        this.toggler.autorotate = () => {\n            this.toggleAutorotate();\n        }\n\n\n    }\n\n    toggleAutorotate() {\n        this.setState({\n            rotating: !this.state.rotating\n        });\n        this.model.toggleAutorotate();\n        if (this.model.rotating) {\n            this.toggler.closeSidemenu();\n        }\n        this.continuousRender();\n    }\n\n    runPerformanceTest() {\n        Alert.info(\"To modify testing parameters, see 'initTesting()' in Model class.\");\n\n        this.model.initTesting(this.chronometer.step);\n\n        if (!this.state.rotating) {\n            this.toggleAutorotate();\n        }\n\n        this.chronometer.testing = true;\n    }\n\n    continuousRender = () => {\n        this.model.update();\n        this.updateNum();\n        this.chronometer.click();\n        this.model.controls.update();\n        if (this.model.rotating) {\n            requestAnimationFrame(this.continuousRender);\n        }\n    }\n\n    toggleDrawer() {\n        this.setState({\n            showDrawer: !this.state.showDrawer\n        });\n    }\n\n    updateFPS(fps) {\n        this.setState({\n            fps: fps.toFixed(2),\n            numOfRender:this.model.numOfObject\n        });\n    }\n    render() {\n        const num = this.state.numOfRender;\n        const fps = this.state.fps;\n        const showDrawer = this.state.showDrawer;\n        const rotating = this.state.rotating;\n        return (\n            <div>\n                <Header style={{ height: 56 }}>\n                    <Navbar>\n                        <Navbar.Body>\n                            <Nav pullRight >\n                                <ButtonToolbar>\n                                \n                                    <Nav.Item active>fps: {fps}</Nav.Item>\n                                    <Nav.Item active>Molecules rendered: {num}</Nav.Item>\n                                    <Nav.Item onClick={this.runPerformanceTest} appearance=\"active\" icon={<Icon icon=\"dashboard\" />}>Run Performance Test</Nav.Item>\n                                    {/* <Whisper placement=\"bottom\" trigger=\"hover\" speaker={\n                                        <Tooltip>\n                                            The performance test was included for completeness and will be removed after submission.\n                                        </Tooltip>\n                                    }>\n                                        <Icon style={{marginTop: 18}}icon=\"question-circle\" size=\"lg\" />\n                                    </Whisper> */}\n                                    <Nav.Item active={rotating} onClick={this.toggleAutorotate} appearance=\"subtle\" icon={<Icon icon=\"refresh\" spin={rotating} />}>Autorotate</Nav.Item>\n                                \n                                    \n                                    <PerformanceDropdown model={this.model} />\n                                    <LibraryDropdown f={this.functions[3]} />\n                                    <Nav.Item onClick={this.toggleDrawer} appearance=\"subtle\" icon={<Icon icon=\"info\" />}>About</Nav.Item>\n                                    <ExportDropdown f={this.functions[2]} />\n                                    <Nav.Item appearance=\"subtle\" icon={<Icon icon=\"file-download\" />} onSelect={this.functions[0]}>Save</Nav.Item>\n                                    <input type=\"file\"\n                                        id=\"upload-btn\"\n                                        style={{ display: 'none' }}\n                                        className='input-file'\n                                        accept='.json,.webmga'\n                                        onChange={e => this.functions[1](e.target.files[0])} />\n                                    <label for=\"upload-btn\">\n                                        <Nav.Item icon={<Icon icon=\"file-upload\" />}>Upload</Nav.Item>\n                                    </label>\n\n                                </ButtonToolbar>\n\n                            </Nav>\n                            <Nav pullLeft>\n                                <h6 style={{ padding: 20 }}> WebMGA</h6>\n                            </Nav>\n                        </Navbar.Body>\n                    </Navbar>\n                </Header>\n                <Drawer\n                    size={'sm'}\n                    placement={'right'}\n                    show={showDrawer}\n                    onHide={this.toggleDrawer}\n                    backdrop={false}\n                >\n                    <Drawer.Header>\n                        <Drawer.Title>About</Drawer.Title>\n                        <br />\n                        <ButtonToolbar >\n                            <Button color=\"cyan\" href=\"http://students.cs.ucl.ac.uk/2019/group3/WebMGA/notes.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Icon icon=\"mortar-board\" /> Liquid Crystals\n                        </Button>\n                            <Button key=\"man\" color=\"cyan\" href=\"http://students.cs.ucl.ac.uk/2019/group3/WebMGA/manual.txt\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Icon icon=\"info-circle\" /> User Manual\n                        </Button>\n                            <Button color=\"cyan\" href=\"http://students.cs.ucl.ac.uk/2019/group3/WebMGA/diss.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Icon icon=\"book\" /> Dissertation\n                        </Button>\n                            <Button color=\"cyan\" href=\"https://github.com/astromarx/WebMGA\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                <Icon icon=\"github\" /> Github\n                        </Button>\n                        </ButtonToolbar>\n                        <br />\n                        <p><i>See 'Liquid Crystals' for a scientific explanation of the liquid crystal configurations included in the library.</i></p>\n\n                        <p><i>For information on how to upload a custom configuration or how to cite WebMGA in a scientific publication, see 'User Manual'.</i></p>\n\n                    </Drawer.Header>\n\n                    <div style={{ margin: 25 }}>\n                        <h2>WebMGA </h2>\n                        <br />\n                        WebMGA was developed by Eduardo Battistini in 2020-21 for his final project within the BSc Computer Science at University College London, supervised by Guido Germano, Michael P. Allen, and Tobias Ritschel.\n                        <br /><br />\n                        The WebGL Molecular Graphics Application, or WebMGA, is a web-based visualisation tool for coarse-grained molecular models that utilises prolated and elongated convex bodies as the elementary units of simulation.\n                        <br /><br />\n                        Given the prevalence of said geometries in the modelling of liquid crystal systems and the lack of available visualisation platforms suitable for this niche, WebMGA provides a unique, out-of-the-box solution for researchers and educators to generate, stylise, and interact with three-dimensional renders of molecular simulations.\n                        <br /><br />\n                        WebMGA is written in Javascript, and implements the graphics library <a href=\"https://threejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Threejs</a> for rendering images and the <a href=\"https://rsuitejs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">rSuite</a> library to provide a sleek user interface that is intuitively compartmentalised and easy to learn.\n                        <br /><br />\n                        WebMGA is an evolution of <a href=\"http://qmga.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">QMGA</a>, an OpenGL and Qt3 based application written in C++ that filled this gap in molecular graphics in 2008.\n                    \n                    </div>\n                </Drawer>\n            </div>\n        );\n    }\n};\n\nexport default GeneralMenu;","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/Tools.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/SubMenus.js",["100","101","102","103","104","105","106","107","108"],"\nimport { Nav, Divider, Checkbox, FormGroup, RadioGroup, Radio, Grid, Row, Col, Alert, Whisper, Tooltip, Icon } from 'rsuite';\nimport React from \"react\";\nimport { SliceSlider, ParameterInput, ParameterSet, CustomSlider } from './Tools'\nimport View from './View'\n\n\nconst TITLE_LEFT_MARGIN = 30;\nconst dividerStyle = {\n    color: '#A4A9A3'\n}\nconst submenuParameterSetStyling = [\n    { width: 130, marginLeft: 10 },\n    { marginTop: 10, marginLeft: 30 }\n];\nexport class ModelsOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.state.model;\n        this.model = props.model;\n\n        this.selectShape = this.selectShape.bind(this);\n        this.selectSet = this.selectSet.bind(this);\n        this.updateParameter = this.updateParameter.bind(this);\n        this.toggleWireframe = this.toggleWireframe.bind(this);\n        this.toggleColour = this.toggleColour.bind(this);\n        this.updateUserColour = this.updateUserColour.bind(this);\n    }\n\n\n    updateUserColour(val, type) {\n        let colour = this.state.configurations[this.state.active].colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = val;\n                break;\n            case 'g':\n                colour.g = val;\n                break;\n            case 'b':\n                colour.b = val;\n                break;\n            default:\n                Alert.error('Error: Unexpected RGB Identifier');\n        }\n        this.model.updateUserColour(this.state.active, colour);\n        this.model.update();\n        View.state.model.configurations[this.state.active].colour = colour;\n    }\n\n    toggleColour() {\n        let toggle = !this.state.configurations[this.state.active].colourFromDirector;\n        this.setState({\n            colourFromDirector: toggle\n        });\n        View.state.model.configurations[this.state.active].colourFromDirector = toggle;\n        this.model.toggleUserColour(this.state.active, toggle);\n        this.model.update();\n    }\n\n    toggleWireframe() {\n        let toggle = !this.state.configurations[this.state.active].displayAsWireframe;\n        this.setState({\n            displayAsWireframe: toggle\n        });\n        View.state.model.configurations[this.state.active].displayAsWireframe = toggle;\n        this.model.toggleWireframe(this.state.active, toggle);\n        this.model.update();\n    }\n\n    updateParameter(val, i) {\n        let parameter = parseFloat(val);\n\n        let globalState = View.state.model.configurations[this.state.active];\n        globalState.parameters.vals[i] = parameter;\n\n        let configs = this.state.configurations;\n        configs[this.state.active].parameters.vals[i] = parameter;\n\n        this.setState({\n            configurations: configs\n        });\n\n        this.model.updateShape(this.state.active, globalState.shape, globalState.parameters);\n        this.model.update();\n        this.reset();\n    }\n\n    reset() {\n        let i;\n        if (this.state.reset > 50) {\n            i = 0;\n        } else {\n            i = this.state.reset;\n        }\n        this.setState(\n            {\n                reset: ++i\n            }\n        );\n    }\n\n    selectSet(val) {\n        for (let i = 0; i < this.state.sets.length; i++) {\n            if (this.state.sets[i].localeCompare(val) === 0) {\n                this.setState({\n                    active: i\n                })\n                View.state.model.active = i;\n                break;\n            }\n        }\n        this.reset();\n    }\n\n    selectShape(val) {\n        let parameters = this.model.getParameters(val);\n        this.setState(\n            {\n                shape: val,\n                parameters: parameters\n            }\n        );\n        this.reset();\n        View.state.model.configurations[this.state.active].shape = val;\n        View.state.model.configurations[this.state.active].parameters = parameters;\n        this.model.updateShape(this.state.active, val, parameters);\n        this.model.update();\n    }\n\n    render() {\n        const configState = this.state.configurations[this.state.active];\n        const reset = this.state.reset;\n        const title = configState.title;\n        const shapes = [\"Ellipsoid\", \"Sphere\", \"Spherocylinder\", \"Spheroplatelet\", \"Cut Sphere\", \"Cylinder\", \"Torus\"];\n        const sets = this.state.sets;\n\n        return (\n            <div key={reset}>\n\n\n                <Divider><strong style={dividerStyle}> Configuration</strong></Divider>\n                <ParameterInput f={this.selectSet} selectingSet title=\"Set\" values={sets} active={title} styling={submenuParameterSetStyling} />\n                <ParameterInput f={this.selectShape} title=\"Shape\" values={shapes} active={configState.shape} styling={submenuParameterSetStyling} />\n                <ParameterSet f={this.updateParameter} titles={configState.parameters.names} values={configState.parameters.vals} step={0.1} positive styling={submenuParameterSetStyling} />\n                <br />\n                <Divider><strong style={dividerStyle}>  Material </strong></Divider>\n\n                <Row className=\"show-grid\">\n                    <Col xs={1} />\n                    <Col xs={20}>\n                        <Checkbox checked={configState.displayAsWireframe} onClick={this.toggleWireframe}> Display as Wireframe </Checkbox>\n                        <Checkbox checked={configState.colourFromDirector} onClick={this.toggleColour}> Colour from Director </Checkbox>\n                        <br />\n                    </Col>\n                </Row>\n\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.r} type={'r'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.g} type={'g'} />\n                <CustomSlider f={this.updateUserColour} disabled={configState.colourFromDirector} boundaries={[0, 255]} val={configState.colour.b} type={'b'} />\n            </div>\n        );\n    }\n}\n\nexport class VideoOptions extends React.Component{\n    constructor(props){\n        super();\n        this.state =View.state.model;\n    }\n    render(){\n        return(\n            <div>\n\n                <Grid fluid>\n                <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Play Video </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} > Play </Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Download </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox> download</Checkbox>\n                        </Col>\n                    </Row>\n                  \n                </Grid>\n                <br />\n\n                <br />\n            </div>\n\n        )\n    }\n}\n\nexport class PeriodicBoundingOption extends React.Component{\n    constructor(props) {\n        super();\n        this.state = View.state.model;\n        //this.state.configurations[this.state.active].displayFoldState=true;\n        //this.state.boundingShapeEnabled =false;\n        this.model = props.model;\n        this.toggleFold = this.toggleFold.bind(this);\n        //this.toggleUnFold= this.toggleUnFold.bind(this);\n        this.toggleBoundingShapeEnabled= this.toggleBoundingShapeEnabled.bind(this);\n    }\n   \n    toggleFold() {\n        let toggle = !this.state.configurations[this.state.active].displayFoldState;\n        this.setState({\n            displayFoldState: toggle\n        });\n        View.state.model.configurations[this.state.active].displayFoldState = toggle;\n        this.model.toggleFoldState(this.state.active,toggle);\n        this.model.update();\n    }\n\n    toggleBoundingShapeEnabled() {\n        let toggle = !this.state.boundingShapeEnabled;\n        this.setState({\n            boundingShapeEnabled: toggle\n        });\n        this.state.boundingShapeEnabled = toggle;\n        this.model.updateBoundingShape(View.state.reference.activeShape, toggle);\n        this.model.update();\n    }\n    \n\n    render() {\n        const configState = this.state.configurations[this.state.active];\n        const enabled = this.state.boundingShapeEnabled;\n        return (\n            \n            <div>\n\n                <Grid fluid>\n                <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Unit Box </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} checked={enabled}onClick={this.toggleBoundingShapeEnabled}>  Show </Checkbox>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Periodic Boundary Conditions  </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} checked={configState.displayFoldState} onClick={this.toggleFold}> Fold</Checkbox>\n                        </Col>\n                    </Row>\n                    {/* <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Unfold </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} checked={configState.displayUnFoldState} onClick={this.toggleUnFold}> Show</Checkbox>\n                        </Col>\n                    </Row> */}\n                </Grid>\n                <br />\n\n                <br />\n            </div>\n        );\n    }\n}\n\nexport class CameraOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.state.camera;\n        this.model = props.model;\n        this.toggler = props.toggler;\n        this.selectType = this.selectType.bind(this);\n        this.updateLookat = this.updateLookat.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n        this.updateZoom = this.updateZoom.bind(this);\n        this.updateState = this.updateState.bind(this);\n        \n        this.toggler.updateCamera = () => {\n            this.updateState()\n        }\n    }\n\n    updateState(){\n        this.setState(View.state.camera);\n    }\n\n    updateZoom(val) {\n        this.setState({\n            zoom: val\n        });\n        this.model.updateCameraZoom(val);\n        this.model.update();\n        View.state.camera.zoom = val;\n    }\n\n    selectType(val) {\n        this.setState({\n            type: val\n        });\n        View.state.camera.type = val;\n        this.model.setCamera(val);\n        if (val == \"orthographic\") {\n            this.updateZoom(50);\n\n        } else {\n            this.updateZoom(1);\n        }\n\n    }\n\n    updatePosition(val, type) {\n        let position = this.state.position;\n\n        if (val != NaN && val != null) {\n            switch (type) {\n                case 'x':\n                    position.x = val;\n                    break;\n                case 'y':\n                    position.y = val;\n                    break;\n                case 'z':\n                    position.z = val;\n                    break;\n                default:\n                    Alert.error('Error: Unexpected Camera Position Input');\n                    return;\n            }\n        }\n\n        this.model.updateCameraPosition(position);\n        this.model.update();\n        View.state.camera.position = position;\n    }\n\n    updateLookat(val, type) {\n        let lookAt = this.state.lookAt;\n\n        if (val != NaN && val != null) {\n            switch (type) {\n                case 0:\n                    lookAt.x = parseFloat(val);\n                    break;\n                case 1:\n                    lookAt.y = parseFloat(val);\n                    break;\n                case 2:\n                    lookAt.z = parseFloat(val);\n                    break;\n                default:\n                    Alert.error('Error: Unexpected Look At Input');\n                    return;\n            }\n        }\n\n        this.model.updateLookAt(lookAt);\n        this.model.update();\n        View.state.camera.lookAt = lookAt;\n    }\n\n\n    render() {\n        const cameraType = this.state.type;\n        const zoom = this.state.zoom;\n        const lookAt = [this.state.lookAt.x, this.state.lookAt.y, this.state.lookAt.z];\n        const cameraPosition = this.state.position;\n\n\n        return (\n            <div key={JSON.stringify(this.state)}>\n                <br />\n                <Row className=\"show-grid\">\n                    <Col xs={2} />\n                    <Col xs={12}>\n\n                        <FormGroup controlId=\"radioList\">\n                            <RadioGroup name=\"radioList\" value={cameraType} onChange={this.selectType}>\n                                <p><b>Type</b></p>\n                                <Radio value=\"perspective\">Perspective </Radio>\n                                <Radio value=\"orthographic\">Orthographic </Radio>\n                            </RadioGroup>\n                        </FormGroup>\n\n                    </Col>\n                </Row>\n\n                <Grid fluid>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Position</b></p>\n                        </Col>\n                    </Row>\n\n                    <CustomSlider boundaries={[-50, 50]} val={cameraPosition.x} f={this.updatePosition} type={'x'} />\n                    <CustomSlider boundaries={[-50, 50]} val={cameraPosition.y} f={this.updatePosition} type={'y'} />\n                    <CustomSlider boundaries={[-50, 50]} val={cameraPosition.z} f={this.updatePosition} type={'z'} />\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Zoom </b></p>\n                        </Col>\n                    </Row>\n                    <CustomSlider key={cameraType} boundaries={[1, 100]} val={zoom} f={this.updateZoom} />\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Look at</b></p>\n                        </Col>\n                    </Row>\n                    <ParameterSet titles={[\"x\", \"y\", \"z\"]} values={lookAt} f={this.updateLookat} step={0.5} styling={submenuParameterSetStyling} />\n\n                </Grid>\n                <br />\n\n\n\n            </div>);\n    }\n}\n\nexport class SlicingOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.state.slicing\n        this.model = props.model;\n        this.toggleSlicer = this.toggleSlicer.bind(this);\n        this.toggleHelperX = this.toggleHelperX.bind(this);\n        this.toggleHelperY = this.toggleHelperY.bind(this);\n        this.toggleHelperZ = this.toggleHelperZ.bind(this);\n        this.updateHelpers = this.updateHelpers.bind(this);\n        this.updateSlicer = this.updateSlicer.bind(this);\n    }\n\n    toggleSlicer(){\n        let toggle = !this.state.slicing_enabled;\n        this.model.enableClipping(toggle,View.state.model.active);\n        View.state.slicing.slicing_enabled = toggle\n    }\n\n    updateHelpers(helpers) {\n        this.setState(\n            {\n                helpers: helpers\n            }\n        );\n        View.state.slicing.helpers = helpers;\n    }\n\n    toggleHelperX() {\n        let helpers = this.state.helpers;\n        let toggle = !helpers[0];\n        helpers[0] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(0, toggle);\n        this.model.update();\n    }\n\n    toggleHelperY() {\n        let helpers = this.state.helpers;\n        let toggle = !helpers[1];\n        helpers[1] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(1, toggle);\n        this.model.update();\n    }\n\n    toggleHelperZ() {\n        let helpers = this.state.helpers;\n        let toggle = !helpers[2];\n        helpers[2] = toggle;\n        this.updateHelpers(helpers);\n        this.model.toggleHelper(2, toggle);\n        this.model.update();\n    }\n\n    updateSlicer(i, val) {\n        \n        switch (i) {\n            case 0:\n                this.state.x = val;\n                break;\n            case 1:\n                this.state.y = val;\n                break;\n            case 2:\n                this.state.z = val;\n                break;\n            default:\n                Alert.error('Error: Unexpected Slicing Identifier');\n        }\n\n        this.model.updateSlicer(i, val);\n        this.model.update();\n    }\n    render() {\n        const state = this.state;\n        const slicing_enabled = this.state.slicing_enabled;\n        return (\n            <div>\n                <br />\n                <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Enable Slicing</b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} checked={slicing_enabled}onClick={this.toggleSlicer}> enable </Checkbox>\n                        </Col>\n                    </Row>\n                <SliceSlider title=\"X : \" f={this.updateSlicer} index={0} vals={state.x} disabled={!slicing_enabled}/>\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[0]} onClick={this.toggleHelperX}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Y : \" f={this.updateSlicer} index={1} vals={state.y} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[1]} onClick={this.toggleHelperY}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <SliceSlider title=\"Z : \" f={this.updateSlicer} index={2} vals={state.z} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={state.helpers[2]} onClick={this.toggleHelperZ}> Show Helper</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n            </div>\n        );\n    }\n\n}\n\n\n      \n\n\nexport const AdditionalLightsNav = ({ active, onSelect }) => {\n    return (\n        <Nav activeKey={active} onSelect={onSelect} style={{ margin: 10, width: 280 }} justified appearance=\"tabs\">\n            <Nav.Item eventKey=\"point\">Point</Nav.Item>\n            <Nav.Item eventKey=\"directional\">Directional</Nav.Item>\n        </Nav>\n    );\n};\n\nexport class AdditionalLightOptions extends React.Component {\n\n    constructor(props) {\n        super();\n        this.state = View.state.pointLight;\n        this.model = props.model;\n        this.reset = 0;\n        this.handleSelect = this.handleSelect.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updatePosition = this.updatePosition.bind(this);\n        this.toggleLightEnabled = this.toggleLightEnabled.bind(this);\n        this.toggleHelper = this.toggleHelper.bind(this);\n\n    }\n    handleSelect() {\n        if (this.state.active.localeCompare('point') === 0) {\n            this.setState(View.state.directionalLight);\n        } else {\n            this.setState(View.state.pointLight);\n        }\n        if (this.reset > 5) {\n            this.reset = 0;\n        }\n\n        this.setState({ reset: ++this.reset });\n    }\n\n    toggleHelper() {\n        let helper = !this.state.helper;\n        this.setState({\n            helper: helper\n        });\n\n        if (this.state.active.localeCompare('point') === 0) {\n            View.state.pointLight.helper = helper;\n            this.model.toggleLightHelper(2, helper);\n            this.model.update();\n        } else {\n            View.state.directionalLight.helper = helper;\n            this.model.toggleLightHelper(1, helper);\n            this.model.update();\n        }\n    }\n\n    toggleLightEnabled() {\n        let enabled = !this.state.enabled;\n        this.setState({\n            enabled: enabled\n        });\n        let intensity;\n        if (this.state.active.localeCompare('point') === 0) {\n            View.state.pointLight.enabled = enabled;\n            intensity = View.state.pointLight.colour.i;\n        } else {\n            View.state.directionalLight.enabled = enabled;\n            intensity = View.state.directionalLight.colour.i;\n        }\n\n        if (enabled) {\n            this.updateColour(intensity, 'i');\n        } else {\n            this.updateColour(0, 'i');\n        }\n        this.setState({ reset: ++this.reset });\n\n        if (this.state.active.localeCompare('point') === 0) {\n            View.state.pointLight.colour.i = intensity;\n        } else {\n            View.state.directionalLight.colour.i = intensity;\n        }\n    }\n\n    updateColour(val, type) {\n        let colour = this.state.colour;\n\n        switch (type) {\n            case 'r':\n                colour.r = val;\n                break;\n            case 'g':\n                colour.g = val;\n                break;\n            case 'b':\n                colour.b = val;\n                break;\n            case 'i':\n                colour.i = val;\n                break;\n            default:\n                Alert.error('Error: Unexpected RGB Identifier');\n        }\n\n        if (this.state.active.localeCompare('point') === 0) {\n            this.model.updateLight(2, colour);\n            View.state.pointLight.colour = colour;\n        } else {\n            this.model.updateLight(1, colour);\n            View.state.directionalLight.colour = colour;\n        }\n        this.model.update();\n    }\n    updatePosition(val, type) {\n        let position = this.state.position;\n\n        switch (type) {\n            case 'x':\n                position.x = val;\n                break;\n            case 'y':\n                position.y = val;\n                break;\n            case 'z':\n                position.z = val;\n                break;\n            default:\n                Alert.error('Error: Unexpected Position Identifier');\n        }\n\n        if (this.state.active.localeCompare('point') === 0) {\n            this.model.updateLightPosition(2, position);\n            View.state.pointLight.position = position;\n        } else {\n            this.model.updateLightPosition(1, position);\n            View.state.directionalLight.position = position;\n        }\n        this.model.update();\n    }\n\n    render() {\n        const active = this.state.active;\n        const lightState = this.state;\n        return (\n            <div key={lightState.reset}>\n                <br />\n                <AdditionalLightsNav active={active} onSelect={this.handleSelect} />\n                <br />\n                <Grid fluid>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox checked={lightState.enabled} onClick={this.toggleLightEnabled}> <strong>Enabled </strong> </Checkbox>\n                            <Checkbox checked={lightState.helper} onClick={this.toggleHelper}> <strong>Show Helper </strong> </Checkbox>\n                            <br />\n                        </Col>\n                    </Row>\n                </Grid>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 255]} val={lightState.colour.b} f={this.updateColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[0, 100]} val={lightState.colour.i} f={this.updateColour} type={'i'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Position XYZ </p>\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.x} f={this.updatePosition} type={'x'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.y} f={this.updatePosition} type={'y'} />\n                <CustomSlider disabled={!lightState.enabled} boundaries={[-50, 50]} val={lightState.position.z} f={this.updatePosition} type={'z'} />\n            </div>\n        );\n    }\n}\n\nexport class AmbientLightOptions extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = View.state.ambientLight;\n\n        this.model = props.model;\n\n        this.updateColour = this.updateColour.bind(this);\n        this.updateBg = this.updateBg.bind(this);\n    }\n    updateColour(val, i) {\n        let colour = this.state.ambientLightColour;\n\n        switch (i) {\n            case 'r':\n                colour.r = val;\n                break;\n            case 'g':\n                colour.g = val;\n                break;\n            case 'b':\n                colour.b = val;\n                break;\n            case 'i':\n                colour.i = val;\n                break;\n            default:\n                Alert.error('Error: Unexpected RGB Identifier');\n        }\n        this.model.updateLight(0, colour);\n        this.model.update();\n        View.state.ambientLight.ambientLightColour = colour;\n    }\n    updateBg(val, i) {\n        let colour = this.state.backgroundColour;\n\n        switch (i) {\n            case 'r':\n                colour.r = val;\n                break;\n            case 'g':\n                colour.g = val;\n                break;\n            case 'b':\n                colour.b = val;\n                break;\n            default:\n                Alert.error('Error: Unexpected RGB Identifier');\n        }\n        this.model.updateBg(colour);\n        this.model.update();\n        View.state.ambientLight.backgroundColour = colour;\n    }\n    render() {\n        const ambientLightColour = this.state.ambientLightColour;\n        const backgroundColour = this.state.backgroundColour;\n        return (\n            <div>\n                <Divider><strong style={dividerStyle}> Ambient Light </strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={ambientLightColour.b} f={this.updateColour} type={'b'} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Intensity </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={ambientLightColour.i} f={this.updateColour} type={'i'} />\n                <Divider><strong style={dividerStyle}> Background Colour</strong></Divider>\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.r} f={this.updateBg} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.g} f={this.updateBg} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={backgroundColour.b} f={this.updateBg} type={'b'} />\n            </div>\n        );\n    }\n}\n\nexport class ReferenceOptions extends React.Component {\n    constructor(props) {\n        super();\n        this.state = View.state.reference;\n\n        this.model = props.model;\n        // this.toggleBoundingShapeEnabled = this.toggleBoundingShapeEnabled.bind(this);\n        // this.selectShape = this.selectShape.bind(this);\n        this.toggleAxes = this.toggleAxes.bind(this);\n        this.toggleGrid = this.toggleGrid.bind(this);\n        this.updateColour = this.updateColour.bind(this);\n        this.updateGridSize = this.updateGridSize.bind(this);\n        this.toggleMulticolour = this.toggleMulticolour.bind(this);\n\n    }\n    updateColour(val, type) {\n        let rgb = this.state.gridColour;\n\n        switch (type) {\n            case 'r':\n                rgb.r = val;\n                break;\n            case 'g':\n                rgb.g = val;\n                break;\n            case 'b':\n                rgb.b = val;\n                break;\n            default:\n                Alert.error('Error: Unexpected RGB Identifier');\n        }\n        this.model.updateReferenceColour(rgb);\n        this.model.update();\n        View.state.reference.gridColour = rgb;\n    }\n    updateGridSize(val) {\n        this.model.updateGridSize(val);\n        this.model.update();\n        View.state.reference.size = val;\n    }\n    // toggleBoundingShapeEnabled() {\n    //     let toggle = !View.state.reference.boundingShapeEnabled;\n    //     this.setState({\n    //         boundingShapeEnabled: toggle\n    //     });\n    //     View.state.reference.boundingShapeEnabled = toggle;\n    //     this.model.updateBoundingShape(this.state.activeShape, toggle);\n    //     this.model.update();\n    // }\n    \n    // selectShape(val) {\n    //     this.setState({\n    //         activeShape: val\n    //     });\n    //     View.state.reference.activeShape = val;\n    //     this.model.updateBoundingShape(val, this.state.boundingShapeEnabled);\n    //     this.model.update();\n    // }\n    toggleMulticolour() {\n        this.setState({\n            multicolour: !this.state.multicolour\n        });\n        this.model.toggleAxesMulticolour();\n        this.model.update();\n        View.state.reference.multicolour = !View.state.reference.multicolour;\n    }\n    toggleAxes() {\n        this.setState({\n            showAxes: !this.state.showAxes\n        });\n        this.model.toggleAxes();\n        this.model.update();\n        View.state.reference.showAxes = !View.state.reference.showAxes;\n    }\n    toggleGrid() {\n        this.setState({\n            showGrid: !this.state.showGrid\n        });\n        this.model.toggleGrid();\n        this.model.update();\n        View.state.reference.showGrid = !View.state.reference.showGrid;\n    }\n\n    render() {\n        // const enabled = this.state.boundingShapeEnabled;\n        // const activeShape = this.state.activeShape;\n        const showAxes = this.state.showAxes;\n        const showGrid = this.state.showGrid;\n        const colour = this.state.gridColour;\n        const size = this.state.size;\n        const multicolour = this.state.multicolour;\n        return (\n            <div>\n\n                <Grid fluid>\n                    {/* <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Bounding Shape </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} checked={enabled} onClick={this.toggleBoundingShapeEnabled}>  Show </Checkbox>\n                        </Col>\n                    </Row> */}\n                    {/* <Row className=\"show-grid\">\n                        <Col xs={3} />\n                        <Col xs={12}>\n                            <FormGroup controlId=\"radioList\">\n                                <RadioGroup name=\"radioList\" value={activeShape} onChange={this.selectShape}>\n                                    <Radio disabled={!enabled} value=\"box\"  >Box </Radio>\n                                    {/* <Radio disabled={true} value=\"sphere\" >Sphere </Radio>\n                                    <Radio disabled={true} value=\"cylinder\" >Cylinder </Radio> */}\n\n                                {/* </RadioGroup>\n                            </FormGroup>\n                        </Col>\n                    </Row> */} \n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Axes </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} checked={showAxes} onClick={this.toggleAxes}> Show</Checkbox>\n\n                        </Col>\n                    </Row>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n\n                            <Checkbox style={{ marginLeft: 12 }} checked={multicolour} onClick={this.toggleMulticolour}> Multi-Colour</Checkbox>\n\n\n                        </Col>\n                        <Col xs={4}>\n                            <Whisper placement=\"bottom\" trigger=\"hover\" speaker={\n                                <Tooltip>\n                                    X : RED <br /> Y : GREEN <br /> Z : BLUE\n                            </Tooltip>\n                            }>\n                                <Icon style={{ marginTop: 8 }} icon=\"question-circle\" size=\"lg\" />\n                            </Whisper>\n                        </Col>\n                    </Row>\n\n                    <Row className=\"show-grid\">\n                        <Col xs={2} />\n                        <Col xs={12}>\n                            <br />\n                            <p><b> Grid </b></p>\n                        </Col>\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Col xs={1} />\n                        <Col xs={12}>\n                            <Checkbox style={{ marginLeft: 12 }} checked={showGrid} onClick={this.toggleGrid}> Show</Checkbox>\n                        </Col>\n                    </Row>\n                </Grid>\n                <br />\n\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> Size </p>\n                <CustomSlider disabled={false} boundaries={[0, 100]} val={size} f={this.updateGridSize} />\n                <p style={{ marginLeft: TITLE_LEFT_MARGIN }}> RGB </p>\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.r} f={this.updateColour} type={'r'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.g} f={this.updateColour} type={'g'} />\n                <CustomSlider disabled={false} boundaries={[0, 255]} val={colour.b} f={this.updateColour} type={'b'} />\n\n\n                <br />\n            </div>\n        );\n    }\n}",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":89,"column":30,"nodeType":"115","messageId":"116","endLine":89,"endColumn":32},{"ruleId":"113","severity":1,"message":"114","line":410,"column":21,"nodeType":"115","messageId":"116","endLine":410,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":418,"column":21,"nodeType":"115","messageId":"116","endLine":418,"endColumn":23},{"ruleId":"117","severity":1,"message":"118","line":10,"column":5,"nodeType":"119","messageId":"120","endLine":10,"endColumn":22},{"ruleId":"117","severity":1,"message":"121","line":11,"column":5,"nodeType":"119","messageId":"120","endLine":11,"endColumn":25},{"ruleId":"117","severity":1,"message":"122","line":14,"column":13,"nodeType":"119","messageId":"120","endLine":14,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":102,"column":42,"nodeType":"115","messageId":"116","endLine":102,"endColumn":44},{"ruleId":"113","severity":1,"message":"114","line":187,"column":29,"nodeType":"115","messageId":"116","endLine":187,"endColumn":31},{"ruleId":"113","severity":1,"message":"123","line":363,"column":18,"nodeType":"115","messageId":"116","endLine":363,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":370,"column":31,"nodeType":"115","messageId":"116","endLine":370,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":388,"column":18,"nodeType":"115","messageId":"116","endLine":388,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":397,"column":24,"nodeType":"115","messageId":"116","endLine":397,"endColumn":26},{"ruleId":"113","severity":1,"message":"114","line":538,"column":20,"nodeType":"115","messageId":"116","endLine":538,"endColumn":22},{"ruleId":"117","severity":1,"message":"124","line":10,"column":5,"nodeType":"119","messageId":"120","endLine":10,"endColumn":25},{"ruleId":"117","severity":1,"message":"125","line":11,"column":5,"nodeType":"119","messageId":"120","endLine":11,"endColumn":22},{"ruleId":"117","severity":1,"message":"126","line":12,"column":5,"nodeType":"119","messageId":"120","endLine":12,"endColumn":9},{"ruleId":"117","severity":1,"message":"127","line":14,"column":10,"nodeType":"119","messageId":"120","endLine":14,"endColumn":29},{"ruleId":"117","severity":1,"message":"128","line":8,"column":5,"nodeType":"119","messageId":"120","endLine":8,"endColumn":13},{"ruleId":"117","severity":1,"message":"129","line":12,"column":15,"nodeType":"119","messageId":"120","endLine":12,"endColumn":42},{"ruleId":"117","severity":1,"message":"130","line":12,"column":44,"nodeType":"119","messageId":"120","endLine":12,"endColumn":66},{"ruleId":"131","severity":1,"message":"132","line":103,"column":13,"nodeType":"133","messageId":"134","endLine":103,"endColumn":180},{"ruleId":"131","severity":1,"message":"132","line":108,"column":17,"nodeType":"133","messageId":"134","endLine":108,"endColumn":113},{"ruleId":"113","severity":1,"message":"123","line":113,"column":36,"nodeType":"115","messageId":"116","endLine":113,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":114,"column":13,"nodeType":"133","messageId":"134","endLine":114,"endColumn":128},{"ruleId":"113","severity":1,"message":"114","line":152,"column":31,"nodeType":"115","messageId":"116","endLine":152,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":172,"column":31,"nodeType":"115","messageId":"116","endLine":172,"endColumn":33},{"ruleId":"131","severity":1,"message":"132","line":305,"column":17,"nodeType":"133","messageId":"134","endLine":305,"endColumn":89},{"ruleId":"131","severity":1,"message":"132","line":348,"column":17,"nodeType":"133","messageId":"134","endLine":348,"endColumn":113},{"ruleId":"113","severity":1,"message":"114","line":370,"column":34,"nodeType":"115","messageId":"116","endLine":370,"endColumn":36},{"ruleId":"113","severity":1,"message":"114","line":417,"column":18,"nodeType":"115","messageId":"116","endLine":417,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":417,"column":26,"nodeType":"115","messageId":"137","endLine":417,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":417,"column":31,"nodeType":"115","messageId":"116","endLine":417,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":417,"column":46,"nodeType":"115","messageId":"116","endLine":417,"endColumn":48},{"ruleId":"117","severity":1,"message":"138","line":2,"column":135,"nodeType":"119","messageId":"120","endLine":2,"endColumn":142},{"ruleId":"117","severity":1,"message":"139","line":67,"column":15,"nodeType":"119","messageId":"120","endLine":67,"endColumn":20},{"ruleId":"140","severity":1,"message":"141","line":243,"column":9,"nodeType":"142","messageId":"143","endLine":243,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":342,"column":17,"nodeType":"115","messageId":"116","endLine":342,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":354,"column":13,"nodeType":"115","messageId":"137","endLine":354,"endColumn":23},{"ruleId":"113","severity":1,"message":"123","line":354,"column":17,"nodeType":"115","messageId":"116","endLine":354,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":379,"column":13,"nodeType":"115","messageId":"137","endLine":379,"endColumn":23},{"ruleId":"113","severity":1,"message":"123","line":379,"column":17,"nodeType":"115","messageId":"116","endLine":379,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":526,"column":17,"nodeType":"142","messageId":"143","endLine":526,"endColumn":27},{"ruleId":"140","severity":1,"message":"141","line":529,"column":17,"nodeType":"142","messageId":"143","endLine":529,"endColumn":27},{"ruleId":"140","severity":1,"message":"141","line":532,"column":17,"nodeType":"142","messageId":"143","endLine":532,"endColumn":27},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'MeshPhongMaterial' is defined but never used.","Identifier","unusedVar","'MeshStandardMaterial' is defined but never used.","'THREE' is defined but never used.","Expected '!==' and instead saw '!='.","'SphereBufferGeometry' is defined but never used.","'MeshBasicMaterial' is defined but never used.","'Mesh' is defined but never used.","'BufferGeometryUtils' is defined but never used.","'Material' is defined but never used.","'ParenthesisNodeDependencies' is defined but never used.","'planckMassDependencies' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","'Divider' is defined but never used.","'state' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-global-assign","no-unsafe-negation"]