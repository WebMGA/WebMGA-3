[{"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/index.js":"1","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/App.js":"2","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Controller.js":"3","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Model.js":"4","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/View.js":"5","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/ReferenceTools.js":"6","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Set.js":"7","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Light.js":"8","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Shapes.js":"9","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Parameters.js":"10","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/VisualisationMenu.js":"11","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/GeneralMenu.js":"12","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/Tools.js":"13","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/SubMenus.js":"14"},{"size":198,"mtime":1678842328969,"results":"15","hashOfConfig":"16"},{"size":928,"mtime":1678842325998,"results":"17","hashOfConfig":"16"},{"size":13796,"mtime":1679858581838,"results":"18","hashOfConfig":"16"},{"size":21097,"mtime":1679857900118,"results":"19","hashOfConfig":"16"},{"size":6906,"mtime":1679540547985,"results":"20","hashOfConfig":"16"},{"size":4053,"mtime":1678842326001,"results":"21","hashOfConfig":"16"},{"size":16336,"mtime":1678884152467,"results":"22","hashOfConfig":"16"},{"size":1375,"mtime":1678842326000,"results":"23","hashOfConfig":"16"},{"size":24017,"mtime":1678842326001,"results":"24","hashOfConfig":"16"},{"size":654,"mtime":1678842326001,"results":"25","hashOfConfig":"16"},{"size":6838,"mtime":1679852057206,"results":"26","hashOfConfig":"16"},{"size":14890,"mtime":1679856181351,"results":"27","hashOfConfig":"16"},{"size":6305,"mtime":1678842328968,"results":"28","hashOfConfig":"16"},{"size":35013,"mtime":1679858306340,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"trfy6y",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/index.js",[],["61","62"],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/App.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Controller.js",["63","64","65","66","67","68"],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Model.js",["69","70","71","72","73","74","75","76","77","78"],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/View.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/ReferenceTools.js",["79","80","81","82"],"import {\n    GridHelper,\n    LineBasicMaterial,\n    Vector3,\n    Color,\n    BufferGeometry,\n    Line,\n    Box3Helper,\n    Box3,\n    SphereBufferGeometry,\n    MeshBasicMaterial,\n    Mesh\n} from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport {Alert} from 'rsuite';\n\nexport class ReferenceTools {\n    subGrid;\n    axes = [];\n    // boundingShape;\n    // boundingShapeType;\n    setsGeometry;\n    size;\n    colour;\n    material;\n    R;G;B;\n\n    constructor(s, c) {\n        this.size = s;\n        this.colour = c;\n\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 3\n        });\n\n        this.multicolour = true;\n        this.genMulticolourAxes();\n        this.genSubgrid();\n\n        this.R = new Color(\"rgb(255, 0, 0)\");\n        this.G = new Color(\"rgb(0, 255, 0)\");\n        this.B = new Color(\"rgb(0, 0, 255)\");\n\n        this.boundingShapeType = 'box';\n        this.setsGeometry = null;\n        \n    }\n\n    genBoundingShape(type, sets) {\n        this.boundingShapeType = type;\n        let b;\n        this.boundingShape = null;\n        \n        for (let set of sets) {\n            if (b != null){\n                break\n            }\n            b =set.genUnitBox()\n            \n        }\n    \n        switch (type) {\n            case 'box':\n                    let box = new Box3();\n                    box.setFromCenterAndSize(new Vector3(0,0,0),new Vector3(b[0]*2,b[1]*2,b[2]*2));\n                    this.boundingShape = new Box3Helper(box, this.colour);\n                    \n                break;\n            default:\n            Alert.error('Error: Unknown bounding shape identifier');\n            \n\n        }\n        \n\n        return this.boundingShape;\n\n    }\n\n   \n    updateColour(colour) {\n        this.colour = colour;\n        this.material = new LineBasicMaterial({\n            color: this.colour,\n            linewidth: 5\n        });\n        if(!this.multicolour){\n            this.genAxes();\n        }\n        this.genSubgrid();\n    }\n\n    updateSize(size) {\n        this.size = size;\n        if(this.multicolour){\n            this.genMulticolourAxes();\n        }else{\n            this.genAxes();\n        }\n        this.genSubgrid();\n    }\n\n    genSubgrid() {\n        this.subGrid = new GridHelper(this.size, this.size, this.colour, this.colour);\n    }\n\n    genAxes() {\n        this.axes = [];\n        let axesSize = this.size / 2;\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), this.material));\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), this.material));\n    }\n\n    genMulticolourAxes(){\n        this.axes = [];\n        let axesSize = this.size / 2;\n        let mat1, mat2, mat3;\n        mat1 = new LineBasicMaterial({\n            color: this.R,\n            linewidth: 5\n        });\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(-axesSize, 0, 0), new Vector3(axesSize, 0, 0)]), mat1));\n        mat2 = this.material = new LineBasicMaterial({\n            color: this.G,\n            linewidth: 5\n        });\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, -axesSize, 0), new Vector3(0, axesSize, 0)]), mat2));\n        mat3 = this.material = new LineBasicMaterial({\n            color: this.B,\n            linewidth: 5\n        });\n        this.axes.push(new Line(new BufferGeometry().setFromPoints([new Vector3(0, 0, -axesSize), new Vector3(0, 0, axesSize)]), mat3));\n    }\n\n    toggleMulticolour(){\n        this.multicolour = !this.multicolour;\n        if(this.multicolour){\n            this.genMulticolourAxes();\n        }else{\n            this.updateColour(this.colour);\n            this.genAxes();\n        }\n    }\n   \n\n}\n\nexport default ReferenceTools;","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Set.js",["83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98"],"import {\n    Mesh,\n    MeshPhongMaterial,\n    Vector3,\n    Quaternion,\n    Euler,\n    Color,\n    Material,\n    Box3Helper,\n    Box3\n\n} from 'three';\nimport * as THREE from 'three';\nimport {eigs, ParenthesisNodeDependencies, planckMassDependencies} from 'mathjs';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport * as SHAPE from './Shapes.js';\nimport Model from './Model';\nimport Parameters from './Parameters';\nimport { Alert } from 'rsuite';\nimport colourMap from './ColourMap.json';\n\nexport class Set {\n    name;\n    shapeType;\n    parameters;\n    shape;\n    orientationType;\n    wireframe;\n    userColour;\n    colourByDirector;\n    lod;\n    clippingPlanes;\n    clipIntersection;\n    colourMap;\n    unitBox;\n    \n    \n    \n    positions = [];\n    Folded_position=[]\n    orientations = [];\n    elements = [];\n    meshes = [];\n    moleculeBoundingBox = [];\n\n    \n\n    constructor(data, cp, ci) {\n        this.name = data.name;\n        this.orientationType = data.orientationType;\n        this.positions = data.positions;\n        this.orientations = data.orientations;\n        this.unitBox = data.unitBox;\n        this.clippingPlanes = cp;\n        this.clipIntersection = ci; \n        this.setDefaults();\n\n        if (data.shapeType != null) {\n            this.shapeType = data.shapeType;\n        }\n        if (data.parameters != null) {\n            this.shapeType = data.parameters;\n        }\n        if (this.name == null) {\n            this.name = this.shapeType;\n        }\n        this.genSet();\n        \n    }\n\n    isFoldedTest(){\n        let x = this.unitBox[0]/2;\n        let y = this.unitBox[1]/2;\n        let z = this.unitBox[2]/2;\n        for (let i = 0; i < this.positions.length; i++){\n            let a = this.positions[i][0];\n            let b = this.positions[i][1];\n            let c = this.positions[i][2];\n            if(a>=x || a<=-x){\n                return false\n            }\n            if(b>=y|| b<=-y){\n                return false\n            }\n            if(c>=z || c<=-z){\n               return false\n            }\n        return true;\n        \n    }\n}\n\n    genSet(){\n        this.validateData();\n        this.genGeometries();\n        this.genElements();\n        this.setElements();\n        this.genMeshes();\n        this.genListBoundingBox();\n    }\n\n    \n\n    validateData() {\n        if (this.positions.length !== this.orientations.length) {\n            throw 'Error: Position data does not correspond to orientation data. \\n Total positions: ' + this.positions.length + '\\n Total rotations: ' + this.orientations.length;\n        }\n\n        for (let p in this.parameters) {\n            if (p < 0) {\n                throw 'Error: Invalid parameter ' + p.toString() + ' for ' + this.name + '\\n Must be positive.';\n            }\n        }\n\n        let defaultParameters = Set.getParameters(this.shapeType);\n        if (this.parameters.length != defaultParameters.vals.length) {\n            throw 'Error: Wrong number of parameters specified for ' + this.name + '. \\n Required: ' + defaultParameters.names;\n        }\n    }\n\n    setDefaults() {\n        this.userColour = new Color(\"#FFFFFF\");\n        this.colourByDirector = true;\n        this.wireframe = true;\n        this.renderBackFace =false;\n        this.lod = 2;\n        this.shapeType = 'Ellipsoid';\n        this.parameters = Parameters.Ellipsoid.vals;\n    }\n\n    updateSlicers(i, vals) {\n        this.clippingPlanes[2 * i + 1].constant = vals[1];\n        this.clippingPlanes[2 * i].constant = -vals[0];\n    }\n    // updateSlicedset(){\n    //     clippingPlanes = this.clippingPlanes;\n    //     for(let mesh of this.meshes){\n    //         mesh.material.geometries\n    //     }\n    // }\n    toggleClipIntersection(toggle) {\n        this.clipIntersection = toggle;\n        for (let mesh of this.meshes) {\n            mesh.material.clipIntersection = toggle;\n        }\n    }\n    genUnitBox(){\n        // This is the user input unit box of whole \n        return this.unitBox;\n\n    }\n    \n    genUnfoldPosition(){\n    \n        if(this.isFoldedTest()== false){\n            Alert.info('Model is already unfolded');\n            return\n        }\n        let pos =[];\n        let x = this.unitBox[0];\n        let y = this.unitBox[1];\n        let z = this.unitBox[2];\n\n        for (let i = 0; i < this.positions.length; i++){\n            let rnd1 = (Math.random() * (2) -1) \n            let rnd2 = (Math.random() * (2) -1)\n            let rnd3 = (Math.random() * (2) -1)\n            pos.push([this.positions[i][0]+rnd1*x ,this.positions[i][1]+rnd2*y,this.positions[i][2]+rnd3*z])\n        }\n        this.positions = pos;\n        \n    }\n\n    genFoldedPositionFromUnfold(){\n        if(this.isFoldedTest()== true){\n            Alert.info('Model is already folded');\n            return\n        }\n        let pos =[];\n        let lx = this.unitBox[0]/2;\n        let ly = this.unitBox[1]/2;\n        let lz = this.unitBox[2]/2;\n\n        for (let i = 0; i < this.positions.length; i++){\n            let rx = this.positions[i][0];\n            let ry = this.positions[i][1];\n            let rz = this.positions[i][2];\n            \n            rx = rx%lx;\n            ry = ry%ly;\n            rz = rz%lz;\n           \n            pos.push([rx,ry,rz])\n        }\n        this.Folded_position = pos;\n        \n    }\n    inRange(target,min,max){\n        if (min<=target<=max ){\n            return true\n        }\n        else{\n            return false\n        }\n    }\n    setBackFace(bool){\n        this.renderBackFace =bool;\n    }\n    genMeshes() {\n        let m;\n        let c;\n        let mat;\n        let gutsMaterial;\n        let v;\n\n        for (let elem of this.elements) {\n            if (this.colourByDirector) {\n                let rgb = colourMap.values[elem.colourIndex];\n                c = new Color(Model.rgbToHex(...rgb));\n            } else {\n                c = this.userColour;\n            }\n        \n            mat =new MeshPhongMaterial({\n                color: c,\n                clippingPlanes: this.clippingPlanes,\n                clipIntersection: false,\n                side : THREE.FrontSide,\n                clipShadows: true\n            });\n            mat.wireframe = this.wireframe;\n            if (this.renderBackFace){\n                gutsMaterial = new THREE.MeshBasicMaterial( {color: c, side: THREE.BackSide, clippingPlanes: this.clippingPlanes, clipShadows: true} );\n            }\n            for (let g of elem.geometries) {\n                m = new Mesh(g, mat);\n                this.meshes.push(m);\n                if (this.renderBackFace){\n                    v = new Mesh(g,gutsMaterial);\n                    this.meshes.push(v);\n                }\n                \n            }\n        }\n    }\n    genListBoundingBox(){\n        // Bounding Box for each molecule\n        let BoundingBoxs =[]\n        const color2 = new THREE.Color( '0xff0000')\n        for (let elem of this.elements){\n            let geo = BufferGeometryUtils.mergeBufferGeometries(elem.geometries);\n            let box = new Box3();\n            geo.computeBoundingBox();\n            box.copy(geo.boundingBox);\n            let boundingBox= new Box3Helper(box,color2);\n            boundingBox.material.colorWrite=true;\n            // boundingBox.material.depthWrite=false;\n            BoundingBoxs.push(boundingBox)\n        }\n        this.moleculeBoundingBox = BoundingBoxs;\n    }\n\n    setElements() {\n        let geoms = [];\n\n        for (let elem of this.elements) {\n            if (this.shape.isPreset) {\n                geoms.push(this.shape.presetGeometry.clone());\n            }\n            else {\n                geoms.push(this.shape.stripGeometry.clone());\n                geoms.push(this.shape.fanGeometries[0].clone());\n                geoms.push(this.shape.fanGeometries[1].clone());\n            }\n\n            this.rotate(elem.euler, geoms);\n            this.translate(elem.position, geoms);\n            \n            elem.setGeometries(geoms);\n\n            geoms = [];\n        }\n    }\n    setPositions(lst1,lst2){\n        // let pos =[];\n        // let x = this.unitBox[0];\n        // let y = this.unitBox[1];\n        // let z = this.unitBox[2];\n\n        // for (let i = 0; i < this.positions.length; i++){\n        //     let rnd1 = (Math.random() * (2) -1) \n        //     let rnd2 = (Math.random() * (2) -1)\n        //     let rnd3 = (Math.random() * (2) -1)\n        //     pos.push([this.positions[i][0]+rnd1*x ,this.positions[i][1]+rnd2*y,this.positions[i][2]+rnd3*z])\n        // }\n        // this.positions = pos;\n        const pos = lst1;\n        const ori = lst2;\n        this.positions =pos;\n        this.orientations =ori;\n          \n    }\n\n    genElements() {\n        let pos = this.positions\n        if (this.Folded_position.length>0){\n            pos = this.Folded_position;\n        }\n        for (let i = 0; i < pos.length; i++) {\n            this.elements.push(new this.Element(pos[i], this.getRotations(this.orientationType, this.orientations[i])));\n        }\n        this.calculateDirector();\n        for(let elem of this.elements){\n            elem.setColourIndex(this.calculateColourIndex(elem));\n        }\n    }\n\n    genGeometries() {\n        switch (this.shapeType) {\n            case 'Ellipsoid':\n                this.shape = new SHAPE.Ellipsoid(...this.parameters);\n                break;\n            case 'Spherocylinder':\n                this.shape = new SHAPE.Spherocylinder(...this.parameters);\n                break;\n            case 'Spheroplatelet':\n                this.shape = new SHAPE.Spheroplatelet(...this.parameters);\n                break;\n            case 'Cut Sphere':\n                this.shape = new SHAPE.CutSphere(...this.parameters);\n                break;\n            case 'Sphere':\n                this.shape = new SHAPE.Preset('Sphere', this.parameters);\n                break;\n            case 'Cylinder':\n                this.shape = new SHAPE.Preset('Cylinder', this.parameters);\n                break;\n            case 'Torus':\n                this.shape = new SHAPE.Preset('Torus', this.parameters);\n                break;\n            default:\n                throw 'Error: unexpected shape identifier. \\n Found: ' + this.shapeType;\n        }\n\n        this.shape.LOD = this.lod;\n        this.shape.generate();\n    }\n\n    translate(pos, geoms) {\n        for (let g of geoms) {\n            g.translate(2*pos[0], 2*pos[1], 2*pos[2]);\n        }\n    }\n\n    rotate(e, geoms) {\n        for (let g of geoms) {\n            g.rotateZ(e.z);\n            g.rotateY(e.y);\n            g.rotateX(e.x);\n            \n            \n        }\n    }\n\n    getRotations(type, rot) {\n        let q = new Quaternion();\n        switch (type) {\n            case 'v':\n                let orientationVector = new Vector3(rot[0], rot[1], rot[2])\n                orientationVector.normalize();\n                q.setFromUnitVectors(new Vector3(0, 0, 1), orientationVector);\n                break;\n            case 'q':\n                q.set(rot[1], rot[2], rot[3], rot[0]);\n                break;\n            case 'a':\n                q.setFromAxisAngle(new Vector3(rot[0], rot[1], rot[2]), rot[3]);\n                break;\n            case 'e':\n                let e = new Euler();\n                e.fromArray(rot);\n                q.setFromEuler(e)\n                break;\n            default:\n                throw 'Error: Unexpected rotation type value. \\n Found: ' + type + '\\n Expected: v | q | a | e';\n        }\n\n        q.normalize();\n\n        return q;\n\n    }\n\n    colourFromOrientation(euler) {\n        let colour = [];\n\n        colour.push(Math.round((euler._x + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._y + Math.PI) / (2 * Math.PI) * (255)));\n        colour.push(Math.round((euler._z + Math.PI) / (2 * Math.PI) * (255)));\n\n        return colour;\n    }\n\n    calculateDirector() {\n        let n = this.elements.length;\n\n        if (this.elements.length == 0) {\n            Alert.error('Error: No elements in set, director calculation failed.');\n            return;\n        }\n\n        let orderTensor = [[0,0,0],[0,0,0],[0,0,0]];\n        //let eigenvectorsInColumns = new Matrix3();\n\n        let factor = 3 / (2 * n);\n        let constant = 0.5;\n\n        let orientation;\n\n        // loop over all molecules and calculate order tensor\n        for (let i = 0; i < n; ++i) {\n            orientation = this.elements[i].orientation;\n            orderTensor[0][0] += orientation[0]**2;\n            orderTensor[0][1] += orientation[0]*orientation[1];\n            orderTensor[0][2] += orientation[0]*orientation[2];\n            orderTensor[1][1] += orientation[1]**2;\n            orderTensor[1][2] += orientation[1]*orientation[2];\n            orderTensor[2][2] += orientation[2]**2;\n        }\n\n        // multiply each tensor value with \"factor\" and afterwards subtract \"subtract\" from diagonal elements\n        orderTensor[0][0] *= factor; orderTensor[0][0] -= constant;\n        orderTensor[0][1] *= factor;\n        orderTensor[0][2] *= factor;\n        orderTensor[1][1] *= factor; orderTensor[1][1] -= constant;\n        orderTensor[1][2] *= factor;\n        orderTensor[2][2] *= factor; orderTensor[2][2] -= constant;\n\n        // mirror matrix to make it symmetric\n        orderTensor[1][0] = orderTensor[0][1];\n        orderTensor[2][0] = orderTensor[0][2];\n        orderTensor[2][1] = orderTensor[1][2];\n\n        let eigen = eigs(orderTensor);\n        \n        //returns index of max eigenvalue\n        //this line of code is a bit dodgy\n        let index = eigen.values.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\n\n        this.director = eigen.vectors[index];\n\n        let norm = Math.sqrt(this.director[0]**2 + this.director[1]**2 + this.director[2]**2);\n\n        if (norm == 0 || norm == NaN || norm == undefined){\n            this.director = [0,0,1];\n        }else{\n            this.director[0] /= norm;\n            this.director[1] /= norm;\n            this.director[2] /= norm;\n        }\n\n        // TEST!\n    }\n\n    calculateColourIndex(element){\n        let n = colourMap.values.length - 1;\n\n        let scalarProduct = Math.abs(element.orientation[0] * this.director[0]\n            + element.orientation[1] * this.director[1]\n            + element.orientation[2] * this.director[2]);\n\n        if (scalarProduct > 1){scalarProduct = 1;}\n\n        return Math.round(Math.acos( scalarProduct )/Math.PI*2*( n ));;\n    }\n\n    setUserColour(hex) {\n        this.userColour = new Color(hex);\n    }\n\n    static getParameters(val) {\n        let parameters;\n\n        switch (val) {\n            case 'Ellipsoid':\n                parameters = Parameters.Ellipsoid;\n                break;\n            case 'Spherocylinder':\n                parameters = Parameters.Spherocylinder;\n                break;\n            case 'Spheroplatelet':\n                parameters = Parameters.Spheroplatelet;\n                break;\n            case 'Cut Sphere':\n                parameters = Parameters.CutSphere;\n                break;\n            case 'Sphere':\n                parameters = Parameters.Sphere;\n                break;\n            case 'Cylinder':\n                parameters = Parameters.Cylinder;\n                break;\n            case 'Torus':\n                parameters = Parameters.Torus;\n                break;\n            default:\n                Alert.error('Error: Unexpected shape identifier');\n        }\n\n        return parameters;\n    }\n\n    Element = class Element {\n        geometries;\n        orientation;\n        position;\n        colourIndex;\n        euler;\n\n        constructor(p, q) {\n            this.position = p;\n            this.orientation = this.quaternionToUnitVector(q);\n\n            this.euler = new Euler();\n            this.euler.setFromQuaternion(q);\n            this.colourIndex = 0;\n        }\n\n        quaternionToUnitVector(q){\n            let a = (2 * (   q.w*q.y + q.x*q.z ));\n            let b = (2 * ( - q.w*q.x + q.y*q.z ));\n            let c = (1 - 2 * ( q.x**2 + q.y**2 ));\n            return [a,b,c];\n        }\n\n        setColourIndex(i){\n            this.colourIndex = i;\n        }\n\n        getColour() {\n            return Model.rgbToHex(this.colour[0], this.colour[1], this.colour[2]);\n        }\n\n        setGeometries(geoms) {\n            this.geometries = geoms;\n        }\n\n    }\n}\n\nexport default Set;","/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Light.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Shapes.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/Model/Parameters.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/VisualisationMenu.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/GeneralMenu.js",["99"],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/Tools.js",[],"/Users/yuiisyue/Documents/GitHub/WebMGA-main/src/View/SubMenus.js",["100","101","102","103","104","105","106","107","108","109","110","111","112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":89,"column":30,"nodeType":"120","messageId":"121","endLine":89,"endColumn":32},{"ruleId":"118","severity":1,"message":"119","line":215,"column":39,"nodeType":"120","messageId":"121","endLine":215,"endColumn":41},{"ruleId":"118","severity":1,"message":"119","line":223,"column":16,"nodeType":"120","messageId":"121","endLine":223,"endColumn":18},{"ruleId":"118","severity":1,"message":"119","line":234,"column":26,"nodeType":"120","messageId":"121","endLine":234,"endColumn":28},{"ruleId":"118","severity":1,"message":"119","line":433,"column":21,"nodeType":"120","messageId":"121","endLine":433,"endColumn":23},{"ruleId":"118","severity":1,"message":"119","line":441,"column":21,"nodeType":"120","messageId":"121","endLine":441,"endColumn":23},{"ruleId":"122","severity":1,"message":"123","line":10,"column":5,"nodeType":"124","messageId":"125","endLine":10,"endColumn":22},{"ruleId":"122","severity":1,"message":"126","line":11,"column":5,"nodeType":"124","messageId":"125","endLine":11,"endColumn":25},{"ruleId":"127","severity":1,"message":"128","line":70,"column":129,"nodeType":"129","messageId":"121","endLine":70,"endColumn":150},{"ruleId":"130","severity":1,"message":"131","line":81,"column":9,"nodeType":"132","messageId":"133","endLine":81,"endColumn":20,"fix":"134"},{"ruleId":"118","severity":1,"message":"119","line":201,"column":29,"nodeType":"120","messageId":"121","endLine":201,"endColumn":31},{"ruleId":"118","severity":1,"message":"135","line":382,"column":18,"nodeType":"120","messageId":"121","endLine":382,"endColumn":20},{"ruleId":"118","severity":1,"message":"119","line":389,"column":31,"nodeType":"120","messageId":"121","endLine":389,"endColumn":33},{"ruleId":"118","severity":1,"message":"119","line":407,"column":18,"nodeType":"120","messageId":"121","endLine":407,"endColumn":20},{"ruleId":"118","severity":1,"message":"119","line":416,"column":24,"nodeType":"120","messageId":"121","endLine":416,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":557,"column":20,"nodeType":"120","messageId":"121","endLine":557,"endColumn":22},{"ruleId":"122","severity":1,"message":"136","line":10,"column":5,"nodeType":"124","messageId":"125","endLine":10,"endColumn":25},{"ruleId":"122","severity":1,"message":"137","line":11,"column":5,"nodeType":"124","messageId":"125","endLine":11,"endColumn":22},{"ruleId":"122","severity":1,"message":"138","line":12,"column":5,"nodeType":"124","messageId":"125","endLine":12,"endColumn":9},{"ruleId":"122","severity":1,"message":"139","line":14,"column":10,"nodeType":"124","messageId":"125","endLine":14,"endColumn":29},{"ruleId":"122","severity":1,"message":"140","line":8,"column":5,"nodeType":"124","messageId":"125","endLine":8,"endColumn":13},{"ruleId":"122","severity":1,"message":"141","line":14,"column":15,"nodeType":"124","messageId":"125","endLine":14,"endColumn":42},{"ruleId":"122","severity":1,"message":"142","line":14,"column":44,"nodeType":"124","messageId":"125","endLine":14,"endColumn":66},{"ruleId":"143","severity":1,"message":"144","line":106,"column":13,"nodeType":"145","messageId":"146","endLine":106,"endColumn":180},{"ruleId":"143","severity":1,"message":"144","line":111,"column":17,"nodeType":"145","messageId":"146","endLine":111,"endColumn":113},{"ruleId":"118","severity":1,"message":"135","line":116,"column":36,"nodeType":"120","messageId":"121","endLine":116,"endColumn":38},{"ruleId":"143","severity":1,"message":"144","line":117,"column":13,"nodeType":"145","messageId":"146","endLine":117,"endColumn":128},{"ruleId":"118","severity":1,"message":"119","line":155,"column":31,"nodeType":"120","messageId":"121","endLine":155,"endColumn":33},{"ruleId":"118","severity":1,"message":"119","line":175,"column":31,"nodeType":"120","messageId":"121","endLine":175,"endColumn":33},{"ruleId":"143","severity":1,"message":"144","line":342,"column":17,"nodeType":"145","messageId":"146","endLine":342,"endColumn":89},{"ruleId":"143","severity":1,"message":"144","line":385,"column":17,"nodeType":"145","messageId":"146","endLine":385,"endColumn":113},{"ruleId":"118","severity":1,"message":"119","line":407,"column":34,"nodeType":"120","messageId":"121","endLine":407,"endColumn":36},{"ruleId":"118","severity":1,"message":"119","line":454,"column":18,"nodeType":"120","messageId":"121","endLine":454,"endColumn":20},{"ruleId":"147","severity":1,"message":"148","line":454,"column":26,"nodeType":"120","messageId":"149","endLine":454,"endColumn":37},{"ruleId":"118","severity":1,"message":"119","line":454,"column":31,"nodeType":"120","messageId":"121","endLine":454,"endColumn":33},{"ruleId":"118","severity":1,"message":"119","line":454,"column":46,"nodeType":"120","messageId":"121","endLine":454,"endColumn":48},{"ruleId":"122","severity":1,"message":"150","line":68,"column":15,"nodeType":"124","messageId":"125","endLine":68,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":200,"column":9,"nodeType":"132","messageId":"153","endLine":200,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":201,"column":29,"nodeType":"120","messageId":"121","endLine":201,"endColumn":31},{"ruleId":"118","severity":1,"message":"119","line":213,"column":14,"nodeType":"120","messageId":"121","endLine":213,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":224,"column":33,"nodeType":"120","messageId":"121","endLine":224,"endColumn":35},{"ruleId":"118","severity":1,"message":"119","line":229,"column":15,"nodeType":"120","messageId":"121","endLine":229,"endColumn":17},{"ruleId":"118","severity":1,"message":"119","line":362,"column":17,"nodeType":"120","messageId":"121","endLine":362,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":374,"column":13,"nodeType":"120","messageId":"149","endLine":374,"endColumn":23},{"ruleId":"118","severity":1,"message":"135","line":374,"column":17,"nodeType":"120","messageId":"121","endLine":374,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":399,"column":13,"nodeType":"120","messageId":"149","endLine":399,"endColumn":23},{"ruleId":"118","severity":1,"message":"135","line":399,"column":17,"nodeType":"120","messageId":"121","endLine":399,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":546,"column":17,"nodeType":"132","messageId":"153","endLine":546,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":549,"column":17,"nodeType":"132","messageId":"153","endLine":549,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":552,"column":17,"nodeType":"132","messageId":"153","endLine":552,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":895,"column":9,"nodeType":"132","messageId":"153","endLine":895,"endColumn":25},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'MeshPhongMaterial' is defined but never used.","Identifier","unusedVar","'MeshStandardMaterial' is defined but never used.","no-dupe-keys","Duplicate key 'preserveDrawingBuffer'.","ObjectExpression","no-whitespace-before-property","Unexpected whitespace before property clock.","MemberExpression","unexpectedWhitespace",{"range":"156","text":"157"},"Expected '!==' and instead saw '!='.","'SphereBufferGeometry' is defined but never used.","'MeshBasicMaterial' is defined but never used.","'Mesh' is defined but never used.","'BufferGeometryUtils' is defined but never used.","'Material' is defined but never used.","'ParenthesisNodeDependencies' is defined but never used.","'planckMassDependencies' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","'state' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","noDirectMutation","no-global-assign","no-unsafe-negation",[1751,1753],"."]